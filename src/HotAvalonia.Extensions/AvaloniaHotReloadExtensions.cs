// <auto-generated>
//   This file has been automatically added to your project by the "HotAvalonia.Extensions" NuGet package
//   (https://nuget.org/packages/HotAvalonia.Extensions).
//
//   Please see https://github.com/Kir-Antipov/HotAvalonia for more information.
// </auto-generated>

#region License
// MIT License
//
// Copyright (c) 2023-2024 Kir_Antipov
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#pragma warning disable
#nullable enable

namespace HotAvalonia
{
    /// <summary>
    /// Indicates that the decorated method should be called whenever the associated Avalonia control is hot reloaded.
    /// </summary>
    /// <remarks>
    /// This attribute is intended to be applied to parameterless instance methods of Avalonia controls.
    /// When the control is hot reloaded, the method marked with this attribute is executed.
    /// This can be used to refresh or update the control's state in response to hot reload events.
    ///
    /// <br/><br/>
    ///
    /// The method must meet the following requirements:
    /// <list type="bullet">
    ///   <item>It must be an instance method (i.e., not static).</item>
    ///   <item>It must not have any parameters.</item>
    /// </list>
    ///
    /// Example usage:
    /// <code>
    /// [AvaloniaHotReload]
    /// private void Initialize()
    /// {
    ///     // Code to initialize or refresh
    ///     // the control during hot reload.
    /// }
    /// </code>
    /// </remarks>
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.Conditional("ENABLE_XAML_HOT_RELOAD")]
    [global::System.AttributeUsage(global::System.AttributeTargets.Method)]
    internal sealed class AvaloniaHotReloadAttribute : global::System.Attribute
    {
    }
}

#if ENABLE_XAML_HOT_RELOAD && !DISABLE_XAML_HOT_RELOAD
namespace HotAvalonia
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.IO;
    using global::System.Reflection;
    using global::System.Runtime.CompilerServices;
    using global::Avalonia;

    /// <summary>
    /// Provides extension methods for enabling and disabling hot reload functionality for Avalonia applications.
    /// </summary>
    [ExcludeFromCodeCoverage]
    internal static class AvaloniaHotReloadExtensions
    {
        /// <summary>
        /// A mapping between Avalonia <see cref="Application"/> instances and their associated hot reload context.
        /// </summary>
        private static readonly ConditionalWeakTable<Application, IHotReloadContext> s_apps =
            new ConditionalWeakTable<Application, IHotReloadContext>();

        /// <summary>
        /// Enables hot reload functionality for the given Avalonia application.
        /// </summary>
        /// <param name="app">The Avalonia application instance for which hot reload should be enabled.</param>
        /// <param name="appFilePath">The file path of the application's main source file. Optional if the method called within the file of interest.</param>
        [DebuggerStepThrough]
        public static void EnableHotReload(this Application app, [CallerFilePath] string? appFilePath = null)
        {
            _ = app ?? throw new ArgumentNullException(nameof(app));

            if (!s_apps.TryGetValue(app, out IHotReloadContext? context))
            {
                if (!string.IsNullOrEmpty(appFilePath) && !File.Exists(appFilePath))
                    throw new FileNotFoundException("The corresponding XAML file could not be found.", appFilePath);

                if (!string.IsNullOrEmpty(appFilePath))
                    AvaloniaProjectLocator.AddHint(app.GetType(), appFilePath);

                IHotReloadContext appDomainContext = AvaloniaHotReloadContext.FromAppDomain();
                IHotReloadContext assetContext = AvaloniaHotReloadContext.ForAssets();
                context = HotReloadContext.Combine(appDomainContext, assetContext);
                s_apps.Add(app, context);
            }

            context.EnableHotReload();
        }

        /// <summary>
        /// Enables hot reload functionality for the given Avalonia application.
        /// </summary>
        /// <param name="app">The Avalonia application instance for which hot reload should be enabled.</param>
        /// <param name="projectPathResolver">The callback function capable of resolving a project path for a given assembly.</param>
        [DebuggerStepThrough]
        public static void EnableHotReload(this Application app, Func<Assembly, string?> projectPathResolver)
        {
            AvaloniaProjectLocator.AddHint(projectPathResolver);
            EnableHotReload(app, string.Empty);
        }

        /// <summary>
        /// Disables hot reload functionality for the given Avalonia application.
        /// </summary>
        /// <param name="app">The Avalonia application instance for which hot reload should be disabled.</param>
        [DebuggerStepThrough]
        public static void DisableHotReload(this Application app)
        {
            _ = app ?? throw new ArgumentNullException(nameof(app));

            if (s_apps.TryGetValue(app, out IHotReloadContext? context))
                context.DisableHotReload();
        }
    }
}
#else
namespace HotAvalonia
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Reflection;
    using global::Avalonia;

    /// <summary>
    /// Provides extension methods for enabling and disabling hot reload functionality for Avalonia applications.
    /// </summary>
    [ExcludeFromCodeCoverage]
    internal static class AvaloniaHotReloadExtensions
    {
        /// <summary>
        /// Enables hot reload functionality for the given Avalonia application.
        /// </summary>
        /// <param name="app">The Avalonia application instance for which hot reload should be enabled.</param>
        /// <param name="appFilePath">The file path of the application's main source file. Optional if the method called within the file of interest.</param>
        [Conditional("DEBUG")]
        [DebuggerStepThrough]
        public static void EnableHotReload(this Application app, string? appFilePath = null)
        {
        }

        /// <summary>
        /// Enables hot reload functionality for the given Avalonia application.
        /// </summary>
        /// <param name="app">The Avalonia application instance for which hot reload should be enabled.</param>
        /// <param name="projectPathResolver">The callback function capable of resolving a project path for a given assembly.</param>
        [Conditional("DEBUG")]
        [DebuggerStepThrough]
        public static void EnableHotReload(this Application app, Func<Assembly, string?> projectPathResolver)
        {
        }

        /// <summary>
        /// Disables hot reload functionality for the given Avalonia application.
        /// </summary>
        /// <param name="app">The Avalonia application instance for which hot reload should be disabled.</param>
        [Conditional("DEBUG")]
        [DebuggerStepThrough]
        public static void DisableHotReload(this Application app)
        {
        }
    }
}
#endif

#nullable restore
#pragma warning restore
